You said that The login API generates a JSON Web Token (JWT) upon successful authentication and returns it along with the user ID. given app/api/users/[id]/route.js(
import bcrypt from "bcrypt";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export async function GET(req) {
  const { id } = req.query;

  const user = await prisma.user.findUnique({
    where: {
      id: parseInt(id),
    },
  });

  return new Response(JSON.stringify(user), {
    status: 200,
  });
}
).....based on the current loged in user id, display the logged in user details in: app/my-transactions/page.tsx(
import React from 'react'

export default function page() {
  return (
    <div>page</div>
  )
}

)..... or given the following: app/api/transactions/route.js(
export const dynamic = "force-dynamic"; // defaults to auto
import { PrismaClient } from "@prisma/client";
import { processTransaction } from "@/lib/helpers";

const prisma = new PrismaClient();

// Get all tx
export async function GET(request) {
  const searchParams = request.nextUrl.searchParams;
  console.log(searchParams);
  // return new Response("hsbhd");
  let claimed = searchParams.get("claimed");
  let dateStr = searchParams.get("date");
  let start = searchParams.get("start");
  let end = searchParams.get("end");
  const q = {
    where: {},
    orderBy: {
      TransactionTime: "desc",
    },
    include: {
      User: {
        select: {
          id: true,
          name: true,
        },
      },
    },
  };
  if (claimed) {
    if (claimed === "true") {
      q.where = {
        NOT: [
          {
            userId: null,
          },
        ],
      };
    } else {
      q.where = {
        userId: null,
      };
    }
  }
  if (start) {
    q.where = {
      ...q.where,
      TransactionTime: {
        gte: new Date(start),
        lte: new Date(end),
      },
    };
  }

  if (dateStr) {
    let today = new Date(dateStr);
    let date = new Date(dateStr);

    let nextDate = new Date(date.setDate(date.getDate() + 1));

    q.where = {
      ...q.where,
      TransactionTime: {
        gte: today,
        lt: nextDate,
      },
    };
  }
  console.log(q);
  let tx = await prisma.transaction.findMany(q);
  tx = tx.map((t) => ({
    ...t,
    user: t.User?.name,
    time: t.TransactionTime.toTimeString().slice(0, 5),
  }));
  return new Response(JSON.stringify(tx, null, 2));
}

export async function POST(req) {
  let tx = await req.json();
  tx = processTransaction(tx);

  await prisma.transaction.create({
    data: tx,
  });

  return new Response(
    JSON.stringify({
      ResultCode: 0,
      ResultDesc: "Success",
    })
  );
}

export async function PATCH(req) {
  const { id, userId } = await req.json();

  await prisma.transaction.update({
    where: { TransID: id },
    data: { userId },
  });

  return new Response(
    JSON.stringify(
      {
        message: "Transaction updated successfully",
      },
      null,
      2
    )
  );
}
). In the my-transactions, display all the transaction where the userid matches the logged in user id


given that all transactions are fetched and displayed in the following: "use client";
import React, { useState, useEffect } from "react";
import TransactionCard from "@/components/transactions/TransactionCard";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";

interface Transaction {
  TransID: string;
  TransTime: string;
  TransAmount: string;
}

const getToday = () => new Date().toISOString().split("T")[0];
const getYesterday = () =>
  new Date(new Date().setDate(new Date().getDate() - 1))
    .toISOString()
    .split("T")[0];

const url = "/api/transactions";
const makeURL = (date: string) => {
  if (!date) return url;
  if (date === "7days") {
    const end = new Date().toISOString().split("T")[0];
    const start = new Date(new Date().setDate(new Date().getDate() - 7))
      .toISOString()
      .split("T")[0];
    return url + `?start=${start}&end=${end}`;
  }
  return url + `?date=${date}`;
};

export default function IndexPage() {
  const [transactions, setTransactions] = useState<Transaction[]>([]);
  const [selectedPeriod, setSelectedPeriod] = useState(getToday());
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    fetchTransactions(selectedPeriod);
  }, [selectedPeriod]);

  const fetchTransactions = async (period: string) => {
    setLoading(true);
    try {
      const response = await fetch(makeURL(period));
      if (!response.ok) {
        throw new Error("Failed to fetch transactions");
      }
      const data: Transaction[] = await response.json();
      setTransactions(data);
      setError(null);
    } catch (error) {
      console.error("Error fetching transactions:", error);
      setError(error.message as string);
    } finally {
      setLoading(false);
    }
  };

  const renderTransactions = () => {
    if (loading) {
      return <p>Loading...</p>;
    }
    if (error) {
      return <p>{error}</p>;
    }
    return (
      <>
        {!transactions.length ? (
          <div className="h-60 flex items-center justify-center">
            No data found
          </div>
        ) : (
          transactions.map((transaction) => (
            <TransactionCard
              key={transaction.TransID}
              transTime={transaction.TransTime}
              transAmount={transaction.TransAmount}
              transID={transaction.TransID}
            />
          ))
        )}
      </>
    );
  };

  return (
    <>
      <div className="lg:w-[95%] w-full mx-auto h-auto ">
        <Tabs defaultValue="today" className="w-full">
          <div className="flex w-full items-center justify-center">
            {/* <TabsList> */}
            <TabsList className="fixed mt-[1.5rem] z-50">
              <TabsTrigger
                value="today"
                onClick={() => setSelectedPeriod(getToday())}
              >
                Today
              </TabsTrigger>
              <TabsTrigger
                value="yesterday"
                onClick={() => setSelectedPeriod(getYesterday())}
              >
                Yesterday
              </TabsTrigger>
              <TabsTrigger
                value="7days"
                onClick={() => setSelectedPeriod("7days")}
              >
                Last 7 days
              </TabsTrigger>
              <TabsTrigger value="all" onClick={() => setSelectedPeriod("")}>
                All Transactions
              </TabsTrigger>
            </TabsList>
          </div>

          <div className="my-10 p-2">
            <TabsContent value="today" className="w-full flex flex-wrap gap-1">
              {renderTransactions()}
            </TabsContent>
            <TabsContent
              value="yesterday"
              className="w-full flex flex-wrap gap-1"
            >
              {renderTransactions()}
            </TabsContent>
            <TabsContent value="7days" className="w-full flex flex-wrap gap-1">
              {renderTransactions()}
            </TabsContent>
            <TabsContent value="all" className="w-full flex flex-wrap gap-1">
              {renderTransactions()}
            </TabsContent>
          </div>
        </Tabs>
      </div>
    </>
  );
}
. Make sure you retain the code that does not need changing for the my-transactions